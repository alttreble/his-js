/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Schema tag attributes: xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:nhis='https://www.his.bg' targetNamespace='https://www.his.bg' elementFormDefault='qualified' version='1.9.1'
 */
export type ThisJSONSchemaFileWasGeneratedFromNhisXsdOnTueMay032022031859GMT0300EasternEuropeanSummerTimeForMoreInformationPleaseSeeHttpWwwXsd2JsonschemaOrg =
  ThisJSONSchemaFileWasGeneratedFromNhisXsdOnTueMay032022031859GMT0300EasternEuropeanSummerTimeForMoreInformationPleaseSeeHttpWwwXsd2JsonschemaOrg1 &
    ThisJSONSchemaFileWasGeneratedFromNhisXsdOnTueMay032022031859GMT0300EasternEuropeanSummerTimeForMoreInformationPleaseSeeHttpWwwXsd2JsonschemaOrg2;
export type ThisJSONSchemaFileWasGeneratedFromNhisXsdOnTueMay032022031859GMT0300EasternEuropeanSummerTimeForMoreInformationPleaseSeeHttpWwwXsd2JsonschemaOrg1 =
  {
    [k: string]: unknown;
  };
/**
 * Пол
 */
export type CL001 = string;
/**
 * Статус на Е-рецепта
 */
export type CL002 = string;
/**
 * Статус на Е-направление
 */
export type CL003 = string;
/**
 * Тип на идентификатор на физическо лице
 */
export type CL004 = string;
/**
 * Държава по ISO 3166-1 alpha-2
 */
export type CL005 = string;
/**
 * Медицинска специалност
 */
export type CL006 = string;
/**
 * Тип на Е-рецепта
 */
export type CL007 = string;
/**
 * Начин на употреба на Е-рецепта от тип Т1
 */
export type CL008 = string;
/**
 * Лекарствен продукт
 */
export type CL009 = string;
/**
 * Лекарствена форма
 */
export type CL010 = string;
/**
 * Заболяване по МКБ 10
 */
export type CL011 = string;
/**
 * Класификация на оценката на резулта от медико-диагностична дейност
 */
export type CL012 = string;
/**
 * Път на въвеждане на лекарствен продукт
 */
export type CL013 = string;
/**
 * Тип на Е-направление
 */
export type CL014 = string;
/**
 * РЗОК номер на област
 */
export type CL015 = string;
/**
 * Код на заместване на лекарствен продукт
 */
export type CL016 = string;
/**
 * Районна фармацевтична колегия
 */
export type CL017 = string;
/**
 * Тип на потребител на НЗИС съобщение
 */
export type CL018 = string;
/**
 * Отрязък на Е-рецепта от тип Т3 по НЗОК
 */
export type CL019 = string;
/**
 * Мерна единица за времеви период
 */
export type CL020 = string;
/**
 * Повод за издаване на Е-направление
 */
export type CL021 = string;
/**
 * Медико-диагностична дейност
 */
export type CL022 = string;
/**
 * Роля на медицински специалист
 */
export type CL023 = string;
/**
 * Резултат от медико-диагностична дейност
 */
export type CL024 = string;
/**
 * Метод на получаване на резултат от медико-диагностична дейност
 */
export type CL025 = string;
/**
 * Лекарствен продукт по НЗОК
 */
export type CL026 = string;
/**
 * Приоритет за изпълнение
 */
export type CL027 = string;
/**
 * Скала на стойност на резултат от медико-диагностична дейност
 */
export type CL028 = string;
/**
 * РЗОК номер на област със здравен район
 */
export type CL029 = string;
/**
 * Стойност от лабораторен резултат
 */
export type CL030 = string;
/**
 * Тип номенклатура на лабораторен резултат
 */
export type CL032 = string;
/**
 * Статус на медико-диагностична дейност
 */
export type CL033 = string;
/**
 * Време за приемане на лекарствен продукт
 */
export type CL034 = string;
/**
 * Форма на дозировка
 */
export type CL035 = string;
/**
 * Ваксина
 */
export type CL037 = string;
/**
 * Планова имунизация или реимунизация
 */
export type CL038 = string;
/**
 * Статус на Е-имунизация
 */
export type CL039 = string;
/**
 * Действие при нежелана реакция към лекарствен продукт
 */
export type CL040 = string;
/**
 * Област
 */
export type CL041 = string;
/**
 * Социална група
 */
export type CL042 = string;
/**
 * Статус на лице за имунизация
 */
export type CL043 = string;
/**
 * ЕКАТТЕ
 */
export type CL044 = string;
/**
 * Част от тялото за администриране на лекарствен продукт
 */
export type CL045 = string;
/**
 * Път на навлизане на лекарствен продукт в тялото
 */
export type CL046 = string;
/**
 * Причина за посещение при лекар
 */
export type CL047 = string;
/**
 * Класификация на преглед
 */
export type CL049 = string;
/**
 * Специализирана дейност или манипулация
 */
export type CL050 = string;
/**
 * Вид на преглед за медицинска експертиза по НЗОК
 */
export type CL051 = string;
/**
 * Причина за издаване на направление за медицинска експертиза
 */
export type CL052 = string;
/**
 * Тип адрес
 */
export type CL053 = string;
/**
 * Специални медицински дейности - МКБ 9
 */
export type CL054 = string;
/**
 * Статус на Е-преглед
 */
export type CL055 = string;
/**
 * Медицински инструмент
 */
export type CL056 = string;
/**
 * Тип на медицински инструмент
 */
export type CL057 = string;
/**
 * Производител на медицински инструмент
 */
export type CL058 = string;
/**
 * Тип на прием за хоспитализация
 */
export type CL059 = string;
/**
 * Насочваща институция
 */
export type CL060 = string;
/**
 * Причина за хоспитализация
 */
export type CL061 = string;
/**
 * Клинична пътека
 */
export type CL062 = string;
/**
 * Амбулаторна процедура
 */
export type CL063 = string;
/**
 * Семейно положение
 */
export type CL064 = string;
/**
 * Образование
 */
export type CL065 = string;
/**
 * Степен на тежест на състоянието
 */
export type CL066 = string;
/**
 * Времеви интервал от медицинско събитие
 */
export type CL067 = string;
/**
 * Източник на финансиране
 */
export type CL069 = string;
/**
 * Кръвна група
 */
export type CL070 = string;
/**
 * Тип на алергична реакция
 */
export type CL071 = string;
/**
 * Категория на алергична реакция
 */
export type CL072 = string;
/**
 * Критичност на алергична реакция
 */
export type CL073 = string;
/**
 * Статус на хоспитализация
 */
export type CL074 = string;
/**
 * Резултат от хоспитализация
 */
export type CL075 = string;
/**
 * Роля на диагноза
 */
export type CL076 = string;
/**
 * Клиничен статус
 */
export type CL077 = string;
/**
 * Верификационен статус
 */
export type CL078 = string;
/**
 * Режим на хранене
 */
export type CL079 = string;
/**
 * Разпореждане след изписване
 */
export type CL080 = string;
/**
 * Статус на работоспособност
 */
export type CL081 = string;
/**
 * Тип имунизационна програма
 */
export type CL082 = string;
/**
 * Статус на доклад за медико-диагностична дейност
 */
export type CL083 = string;
/**
 * Тип лечебно заведение за извънболнична помощ
 */
export type CL084 = string;
/**
 * Вид лечебно заведение за болнична помощ
 */
export type CL085 = string;
/**
 * Тип лечебно заведение за болнична помощ
 */
export type CL086 = string;
/**
 * Вид лечебно заведение за извънболнична помощ
 */
export type CL087 = string;
/**
 * Резултат от специализирана дейност или манипулация
 */
export type CL088 = string;
/**
 * Етап на хоспитализация
 */
export type CL089 = string;
/**
 * Ефект от нежелана лекарствена реакция
 */
export type CL090 = string;
/**
 * Изход от нежелана лекарствена реакция
 */
export type CL091 = string;
/**
 * Зависимост или състояние
 */
export type CL092 = string;
/**
 * Връзка с нежелана лекарствена реакция
 */
export type CL093 = string;
/**
 * Повод за издаване на направление по НЗОК
 */
export type CL094 = string;
/**
 * Предупреждениe към издадени е-документи
 */
export type CL998 = string;
/**
 * Код за грешка
 */
export type CL999 = "E001" | "E002" | "E003";
/**
 * Базов тип string ограничен до букви (латиница), цифри, и тире с цел репрезантиране на UUID.
 */
export type Uuid = string;
/**
 * Базов тип string ограничен до букви (латиница), цифри, тире и празен знак.
 */
export type AlphanumericString = string;
/**
 * Базов тип string ограничен до букви (латиница и кирилица), тире и празен знак.
 */
export type AlphaString = string;
/**
 * Базов тип string ограничен до цифри.
 */
export type NumericString = string;
export type DiagnosisFull = DiagnosisBasic & {
  use: DiagnosisUseBase;
  rank: DiagnosisRankBase;
  clinicalStatus?: DiagnosisClinicalStatusBase;
  verificationStatus?: DiagnosisVerificationStatusBase;
  onsetDateTime?: DiagnosisOnsetBase;
  [k: string]: unknown;
};
export type Observation =
  | {
      valueQuantity: ValueQuantityBase;
      [k: string]: unknown;
    }
  | {
      valueCode: ValueCodeBase;
      [k: string]: unknown;
    }
  | {
      valueString: ValueStringBase;
      [k: string]: unknown;
    };
export type AccompanyingMedicalPractitioner = MedicalPractitioner & {
  accompanying?: unknown;
  [k: string]: unknown;
};
export type PatientExtended = Patient & {
  various?: {
    age?: AgeBase;
    weight?: WeightBase;
    isPregnant?: IsPregnantBase;
    isBreastFeeding?: IsBreastFeedingBase;
    maritalStatus?: MaritalStatusBase;
    education?: EducationBase;
    workplace?: WorkplaceBase;
    profession?: ProfessionBase;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};

export interface ThisJSONSchemaFileWasGeneratedFromNhisXsdOnTueMay032022031859GMT0300EasternEuropeanSummerTimeForMoreInformationPleaseSeeHttpWwwXsd2JsonschemaOrg2 {
  CL001?: CL001;
  CL002?: CL002;
  CL003?: CL003;
  CL004?: CL004;
  CL005?: CL005;
  CL006?: CL006;
  CL007?: CL007;
  CL008?: CL008;
  CL009?: CL009;
  CL010?: CL010;
  CL011?: CL011;
  CL012?: CL012;
  CL013?: CL013;
  CL014?: CL014;
  CL015?: CL015;
  CL016?: CL016;
  CL017?: CL017;
  CL018?: CL018;
  CL019?: CL019;
  CL020?: CL020;
  CL021?: CL021;
  CL022?: CL022;
  CL023?: CL023;
  CL024?: CL024;
  CL025?: CL025;
  CL026?: CL026;
  CL027?: CL027;
  CL028?: CL028;
  CL029?: CL029;
  CL030?: CL030;
  CL032?: CL032;
  CL033?: CL033;
  CL034?: CL034;
  CL035?: CL035;
  CL037?: CL037;
  CL038?: CL038;
  CL039?: CL039;
  CL040?: CL040;
  CL041?: CL041;
  CL042?: CL042;
  CL043?: CL043;
  CL044?: CL044;
  CL045?: CL045;
  CL046?: CL046;
  CL047?: CL047;
  CL049?: CL049;
  CL050?: CL050;
  CL051?: CL051;
  CL052?: CL052;
  CL053?: CL053;
  CL054?: CL054;
  CL055?: CL055;
  CL056?: CL056;
  CL057?: CL057;
  CL058?: CL058;
  CL059?: CL059;
  CL060?: CL060;
  CL061?: CL061;
  CL062?: CL062;
  CL063?: CL063;
  CL064?: CL064;
  CL065?: CL065;
  CL066?: CL066;
  CL067?: CL067;
  CL069?: CL069;
  CL070?: CL070;
  CL071?: CL071;
  CL072?: CL072;
  CL073?: CL073;
  CL074?: CL074;
  CL075?: CL075;
  CL076?: CL076;
  CL077?: CL077;
  CL078?: CL078;
  CL079?: CL079;
  CL080?: CL080;
  CL081?: CL081;
  CL082?: CL082;
  CL083?: CL083;
  CL084?: CL084;
  CL085?: CL085;
  CL086?: CL086;
  CL087?: CL087;
  CL088?: CL088;
  CL089?: CL089;
  CL090?: CL090;
  CL091?: CL091;
  CL092?: CL092;
  CL093?: CL093;
  CL094?: CL094;
  CL998?: CL998;
  CL999?: CL999;
  uuid?: Uuid;
  alphanumericString?: AlphanumericString;
  alphaString?: AlphaString;
  numericString?: NumericString;
  amount?: Amount;
  messageSender?: MessageSender;
  messageSenderId?: MessageSenderId;
  messageSenderISName?: MessageSenderISName;
  messageRecipient?: MessageRecipient;
  messageRecipientId?: MessageRecipientId;
  messageId?: MessageId;
  messageType?: MessageType;
  messageCreatedOn?: MessageCreatedOn;
  header?: Header;
  contentsBase?: ContentsBase;
  nrnBase?: NrnBase;
  warningCode?: WarningCode;
  warningDescription?: WarningDescription;
  warningSource?: WarningSource;
  warningsBase?: WarningsBase;
  messageBase?: MessageBase;
  errorType?: ErrorType;
  errorReason?: ErrorReason;
  errorDescription?: ErrorDescription;
  errorFaultyAttribute?: ErrorFaultyAttribute;
  error?: Error;
  accessTokenBase?: AccessTokenBase;
  addressDetailsBase?: AddressDetailsBase;
  adverseConditionsBase?: AdverseConditionsBase;
  ageBase?: AgeBase;
  allowedRepeatsNumberBase?: AllowedRepeatsNumberBase;
  asNeededBase?: AsNeededBase;
  authoredOnBase?: AuthoredOnBase;
  authorityBase?: AuthorityBase;
  birthDateBase?: BirthDateBase;
  bodyRouteBase?: BodyRouteBase;
  bodySiteBase?: BodySiteBase;
  boundsDurationBase?: BoundsDurationBase;
  boundsDurationUnitBase?: BoundsDurationUnitBase;
  cannotPerformBase?: CannotPerformBase;
  certificateBase?: CertificateBase;
  cityBase?: CityBase;
  classBase?: ClassBase;
  closeDateBase?: CloseDateBase;
  correctionDateBase?: CorrectionDateBase;
  countryCodeBase?: CountryCodeBase;
  countyBase?: CountyBase;
  deputyRoleBase?: DeputyRoleBase;
  deviceBase?: DeviceBase;
  diagnosisClinicalStatusBase?: DiagnosisClinicalStatusBase;
  diagnosisOnsetBase?: DiagnosisOnsetBase;
  diagnosisRankBase?: DiagnosisRankBase;
  diagnosisUseBase?: DiagnosisUseBase;
  diagnosisVerificationStatusBase?: DiagnosisVerificationStatusBase;
  documentNumberBase?: DocumentNumberBase;
  dispensationTypeBase?: DispensationTypeBase;
  doseNumberBase?: DoseNumberBase;
  doseQuantityCodeBase?: DoseQuantityCodeBase;
  doseQuantityValueBase?: DoseQuantityValueBase;
  educationBase?: EducationBase;
  ekatteBase?: EkatteBase;
  emailBase?: EmailBase;
  endDateBase?: EndDateBase;
  examinationStatusBase?: ExaminationStatusBase;
  executeDateBase?: ExecuteDateBase;
  expBase?: ExpBase;
  expiresInBase?: ExpiresInBase;
  expiresOnBase?: ExpiresOnBase;
  extPrevImmunizationBase?: ExtPrevImmunizationBase;
  familyNameBase?: FamilyNameBase;
  financingSourceBase?: FinancingSourceBase;
  medicationFormBase?: MedicationFormBase;
  foundNumber?: FoundNumber;
  frequencyBase?: FrequencyBase;
  fulfilDateBase?: FulfilDateBase;
  genderBase?: GenderBase;
  generateCertificateBase?: GenerateCertificateBase;
  gestationalWeekBase?: GestationalWeekBase;
  givenNameBase?: GivenNameBase;
  groupIdentifierBase?: GroupIdentifierBase;
  gtinBase?: GtinBase;
  handleIdBase?: HandleIdBase;
  identifierBase?: IdentifierBase;
  identifierTypeBase?: IdentifierTypeBase;
  immunizationStatusBase?: ImmunizationStatusBase;
  immunoPersonStatusBase?: ImmunoPersonStatusBase;
  incidentalVisitBase?: IncidentalVisitBase;
  includeBase?: IncludeBase;
  isBreastFeedingBase?: IsBreastFeedingBase;
  isCorrectionBase?: IsCorrectionBase;
  isDispensedBase?: IsDispensedBase;
  isFulfilledBase?: IsFulfilledBase;
  isInternationalFulfilBase?: IsInternationalFulfilBase;
  isPatientReceiverBase?: IsPatientReceiverBase;
  isPregnantBase?: IsPregnantBase;
  isProcessingBase?: IsProcessingBase;
  isProtocolBasedBase?: IsProtocolBasedBase;
  isQuantityByFormBase?: IsQuantityByFormBase;
  isSecondaryBase?: IsSecondaryBase;
  isSpecialCaseBase?: IsSpecialCaseBase;
  isSubstitutionAllowedBase?: IsSubstitutionAllowedBase;
  isSuccessfulBase?: IsSuccessfulBase;
  issuedDocumentBase?: IssuedDocumentBase;
  issuedOnBase?: IssuedOnBase;
  lrnBase?: LrnBase;
  lotBase?: LotBase;
  maritalStatusBase?: MaritalStatusBase;
  mdaBase?: MdaBase;
  mdaStatus?: MdaStatus;
  medicationCodeBase?: MedicationCodeBase;
  middleNameBase?: MiddleNameBase;
  mkbBase?: MkbBase;
  nationalityBase?: NationalityBase;
  nextDoseDateBase?: NextDoseDateBase;
  nhifCodeBase?: NhifCodeBase;
  nhifContractBase?: NhifContractBase;
  nhifNumberBase?: NhifNumberBase;
  nhifVaccineCodeBase?: NhifVaccineCodeBase;
  nomenclatureIdBase?: NomenclatureIdBase;
  numberPerformedBase?: NumberPerformedBase;
  observationCodeBase?: ObservationCodeBase;
  occurrenceBase?: OccurrenceBase;
  offsetBase?: OffsetBase;
  openDateBase?: OpenDateBase;
  performedDateTimeBase?: PerformedDateTimeBase;
  periodBase?: PeriodBase;
  periodUnitBase?: PeriodUnitBase;
  pharmacyNumberBase?: PharmacyNumberBase;
  phoneBase?: PhoneBase;
  pinBase?: PinBase;
  pmiBase?: PmiBase;
  postCodeBase?: PostCodeBase;
  pphiBase?: PphiBase;
  ppnBase?: PpnBase;
  practiceNumberBase?: PracticeNumberBase;
  prBookNumberBase?: PrBookNumberBase;
  prescriptionStatusBase?: PrescriptionStatusBase;
  prescriptionTypeBase?: PrescriptionTypeBase;
  primarySourceBase?: PrimarySourceBase;
  priorityBase?: PriorityBase;
  procedureCategoryBase?: ProcedureCategoryBase;
  procedureMethodBase?: ProcedureMethodBase;
  procedureStatusBase?: ProcedureStatusBase;
  professionBase?: ProfessionBase;
  protocolDateBase?: ProtocolDateBase;
  protocolNumberBase?: ProtocolNumberBase;
  purposeBase?: PurposeBase;
  qualificationBase?: QualificationBase;
  quantityBase?: QuantityBase;
  reactionEndDateBase?: ReactionEndDateBase;
  reactionStartDateBase?: ReactionStartDateBase;
  reasonBase?: ReasonBase;
  referenceHighBase?: ReferenceHighBase;
  referenceLowBase?: ReferenceLowBase;
  referenceTextBase?: ReferenceTextBase;
  referralStatusBase?: ReferralStatusBase;
  referralSubtypeBase?: ReferralSubtypeBase;
  referralTypeBase?: ReferralTypeBase;
  reportedBase?: ReportedBase;
  rhifAreaNumberBase?: RhifAreaNumberBase;
  rhifNumberBase?: RhifNumberBase;
  routeBase?: RouteBase;
  rphaNumberBase?: RphaNumberBase;
  searchDateBase?: SearchDateBase;
  sequenceBase?: SequenceBase;
  sequenceIdBase?: SequenceIdBase;
  seriesDosesBase?: SeriesDosesBase;
  sickLeaveDaysBase?: SickLeaveDaysBase;
  sickLeaveIsInitialBase?: SickLeaveIsInitialBase;
  sickLeaveStatusBase?: SickLeaveStatusBase;
  snBase?: SnBase;
  specializedActivityCodeBase?: SpecializedActivityCodeBase;
  substitutionTypeBase?: SubstitutionTypeBase;
  supplementsBase?: SupplementsBase;
  socialGroupBase?: SocialGroupBase;
  startDateBase?: StartDateBase;
  textBase?: TextBase;
  tokenTypeBase?: TokenTypeBase;
  updateDateBase?: UpdateDateBase;
  uvciBase?: UvciBase;
  vaccineAtcBase?: VaccineAtcBase;
  vaccineCodeBase?: VaccineCodeBase;
  vaccineInnBase?: VaccineInnBase;
  vaccineNameBase?: VaccineNameBase;
  valueCodeBase?: ValueCodeBase;
  valueDateTimeBase?: ValueDateTimeBase;
  valueNomenclatureBase?: ValueNomenclatureBase;
  valueQuantityBase?: ValueQuantityBase;
  valueScaleBase?: ValueScaleBase;
  valueStringBase?: ValueStringBase;
  valueUnitBase?: ValueUnitBase;
  wasSubstitutedBase?: WasSubstitutedBase;
  weightBase?: WeightBase;
  whenHandedOverBase?: WhenHandedOverBase;
  whenPreparedBase?: WhenPreparedBase;
  whenToTakeBase?: WhenToTakeBase;
  workplaceBase?: WorkplaceBase;
  addressBase?: AddressBase;
  diagnosisBasic?: DiagnosisBasic;
  diagnosisFull?: DiagnosisFull;
  diagnosticReport?: DiagnosticReport;
  dosageInstruction?: DosageInstruction;
  extImmunizationDetails?: ExtImmunizationDetails;
  humanNameBase?: HumanNameBase;
  medicalPractitioner?: MedicalPractitioner;
  accompanyingMedicalPractitioner?: AccompanyingMedicalPractitioner;
  medicationPrescribe?: MedicationPrescribe;
  medicationDispense?: MedicationDispense;
  observation?: Observation;
  patient?: Patient;
  patientExtended?: PatientExtended;
  procedure?: Procedure;
  referenceRange?: ReferenceRange;
  verification?: Verification;
  [k: string]: unknown;
}
/**
 * Базов тип децимално число, конфигурирано да описва суми.
 */
export interface Amount {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип изпращач на съобщението.
 */
export interface MessageSender {
  "value": CL018;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * ID на изпращача на съобщението - за медицински лица е техния УИН, за други е номер на лечебното заведение
 */
export interface MessageSenderId {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Име и версия на информационната система, изпратила съобщението
 */
export interface MessageSenderISName {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип на получател на съобщението.
 */
export interface MessageRecipient {
  "value": CL018;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * ID на получателя на съобщението.
 */
export interface MessageRecipientId {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Уникален идентификатор на съобщението - трябва да бъде ново UUID генерирано към момента на изпращане на съобщението
 */
export interface MessageId {
  "value": Uuid & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип на съобщението (винаги във формат XXXX).
 */
export interface MessageType {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата и час на изготвяне на съобщението по ISO 8601 в локално време с часова зона
 */
export interface MessageCreatedOn {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Носител на системната информация за съобщението.
 */
export interface Header {
  sender: MessageSender;
  senderId: MessageSenderId;
  senderISName: MessageSenderISName;
  recipient: MessageRecipient;
  recipientId: MessageRecipientId;
  messageId: MessageId;
  messageType: MessageType;
  createdOn: MessageCreatedOn;
  [k: string]: unknown;
}
/**
 * Носител на бизнес информацията за съобщението.
 */
export interface ContentsBase {
  [k: string]: unknown;
}
/**
 * Национален уникален номер на медицински документ, генериран от НЗИС
 */
export interface NrnBase {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Код на предупреждението
 */
export interface WarningCode {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Текстово описание на предупреждението
 */
export interface WarningDescription {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Източник на предупреждението (напр. НЗОК)
 */
export interface WarningSource {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Предупредителни съобщения към съобщението.
 */
export interface WarningsBase {
  code: WarningCode;
  description: WarningDescription;
  source: WarningSource;
  nrnTarget: NrnBase;
  [k: string]: unknown;
}
/**
 * Контейнер на съобщението.
 */
export interface MessageBase {
  header: Header;
  [k: string]: unknown;
}
/**
 * Специфичен код на грешката
 */
export interface ErrorType {
  "value": CL999;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Текст, описващ причината за възникване на грешката (на Пр. "некоректно подаден параметър")
 */
export interface ErrorReason {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Допълнителна информация за грешката, ако има такава необходимост
 */
export interface ErrorDescription {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Системно име на сгрешения параметър, ако това е типа на грешката
 */
export interface ErrorFaultyAttribute {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
export interface Error {
  type: ErrorType;
  reason?: ErrorReason;
  description?: ErrorDescription;
  faultyAttribute?: ErrorFaultyAttribute;
  [k: string]: unknown;
}
/**
 * Токен за достъп до НЗИС
 */
export interface AccessTokenBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Пълен адрес
 */
export interface AddressDetailsBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали населеното място по местоживеене на пациента е определено като такова с неблагоприятни условия
 */
export interface AdverseConditionsBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Възраст
 */
export interface AgeBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Колко пъти дадена рецептурна бланка за многократно отпускане може да се изпълнява. За неограничен брой пъти се въвежда 0
 */
export interface AllowedRepeatsNumberBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Прием на лекарството при необходимост
 */
export interface AsNeededBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата на издаване на документ
 */
export interface AuthoredOnBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Организация, носеща отговорност за ваксинацията в държавата на поставяне на предходната ваксина
 */
export interface AuthorityBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата на раждане
 */
export interface BirthDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Как медикамента е навлязал в тялото
 */
export interface BodyRouteBase {
  "value": CL046;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Част от тялото, на която е поставен медикамента
 */
export interface BodySiteBase {
  "value": CL045;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Продължителност на изпълнението на инструкциите в посочената мерна единица (напр. 30 дни, 2 седмици)
 */
export interface BoundsDurationBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Мерна единица за продължителността на изпълнението на инструкциите
 */
export interface BoundsDurationUnitBase {
  "value": CL020;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали процедурата може да бъде извършена (напр. недостатъчно материал)
 */
export interface CannotPerformBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Сертификат в base64 формат
 */
export interface CertificateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Град по настоящ адрес
 */
export interface CityBase {
  "value": AlphaString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Класификация на прегледа
 */
export interface ClassBase {
  "value": CL049;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата и час на приключване на прегледа
 */
export interface CloseDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата и час на последна корекция
 */
export interface CorrectionDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Kод на държава/Националност по ISO 3166-1 alpha-2
 */
export interface CountryCodeBase {
  "value": CL005;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Област
 */
export interface CountyBase {
  "value": CL041;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Роля по заместване на медицински специалист
 */
export interface DeputyRoleBase {
  "value": CL023;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Уред или средство използвани за извършване на процедурата
 */
export interface DeviceBase {
  "value": CL056;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Клиничен статус на диагнозата
 */
export interface DiagnosisClinicalStatusBase {
  "value": CL077;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Първо проявление на симптомите
 */
export interface DiagnosisOnsetBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Относителен ранг (важност) на диагнозата в посочената ѝ роля в низходящ ред
 */
export interface DiagnosisRankBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Роля на диагнозата спрямо медицинския документ
 */
export interface DiagnosisUseBase {
  "value": CL076;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Верификационен статус на диагнозата
 */
export interface DiagnosisVerificationStatusBase {
  "value": CL078;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Номер на документ (НРН за е-документ), според който се създава този е-документ
 */
export interface DocumentNumberBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Начин на употреба на Е-рецепта от тип Т1
 */
export interface DispensationTypeBase {
  "value": CL008;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Номер на дозата от ваксината
 */
export interface DoseNumberBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Форма на дозировката - или по UCUM, или по номенклатура CL035
 */
export interface DoseQuantityCodeBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Количество на лекарствения продукт за еднократен прием спрямо инструкциите за дозировка и форма на дозировката в "doseQuentityUnit"
 */
export interface DoseQuantityValueBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Образование към момента на издаване на е-документа
 */
export interface EducationBase {
  "value": CL065;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * ЕКАТТЕ (само за пациенти, живущи в България)
 */
export interface EkatteBase {
  "value": CL044;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Имейл за връзка
 */
export interface EmailBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Крайна дата на зададен календарен период.
 */
export interface EndDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Статус на преглед
 */
export interface ExaminationStatusBase {
  "value": CL055;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата на завършване на дейностите
 */
export interface ExecuteDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Срок на Годност на Лекарствен Продукт
 */
export interface ExpBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Време, в което валидността на ресурс изтича (в секунди)
 */
export interface ExpiresInBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата и час, в които валидността на ресурс изтича
 */
export interface ExpiresOnBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали предходната имунизация от серията е поставена преди съществуването или извън системата НЗИС (ако ваксината изисква повече от една доза)
 */
export interface ExtPrevImmunizationBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Фамилия/Последно име
 */
export interface FamilyNameBase {
  "value": AlphaString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Източник на финансиране
 */
export interface FinancingSourceBase {
  "value": CL069;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Лекарствена форма
 */
export interface MedicationFormBase {
  "value": CL010;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Общ брой записи, които са намерени в НЗИС по подадените критерии за търсене
 */
export interface FoundNumber {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Честота на изпълнение на инструкциите спрямо периода на изпълнение
 */
export interface FrequencyBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата на изпълнение
 */
export interface FulfilDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Пол
 */
export interface GenderBase {
  "value": CL001;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва, дали НЗИС да генерира сертификат (ако е приложимо) за изпратените процедури
 */
export interface GenerateCertificateBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Срок на бременността в гестационна седмица при жени
 */
export interface GestationalWeekBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Собствено име
 */
export interface GivenNameBase {
  "value": AlphaString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Само при рецепти от тип 5а - отрязък от рецептурната бланка (А, B или C), към който спада този медикамент
 */
export interface GroupIdentifierBase {
  "value": CL019;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Национален Търговски Номер на Лекарствен Продукт
 */
export interface GtinBase {
  "value": NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Уникален идентификатор на операция за обработка
 */
export interface HandleIdBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * В зависимост от identifierType, има различно значение, съдържание и структура
 */
export interface IdentifierBase {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип на идентификатор - ЕГН/ЛНЧ/SSN/Паспорт/Друг
 */
export interface IdentifierTypeBase {
  "value": CL004;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Статус на имунизация
 */
export interface ImmunizationStatusBase {
  "value": CL039;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Статус на лице за имунизация
 */
export interface ImmunoPersonStatusBase {
  "value": CL043;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали посещението при лекаря е инцидентно или не
 */
export interface IncidentalVisitBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали периода да бъде добавен (true) или премахнат (false) от таблицата за заместване
 */
export interface IncludeBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Индикация дали пациентката е кърмачка
 */
export interface IsBreastFeedingBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали заявката е коригираща заявка за предходно въведени резултати
 */
export interface IsCorrectionBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Уакзва дали този медикамент е вече издаден
 */
export interface IsDispensedBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Уакзва дали рецептата е изпълнена (т.е. всички медикаменти са издадени към пациента)
 */
export interface IsFulfilledBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дали рецептата е изпълнена извън България/Страната на издаване
 */
export interface IsInternationalFulfilBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали получателят на медикамента е самия пациент
 */
export interface IsPatientReceiverBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Индикация дали пациентката е бременна
 */
export interface IsPregnantBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали лабораторията започва работа по тази дейност (напр. след събрана проба, направена снимка)
 */
export interface IsProcessingBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали медикаментите ще се изписват по протокол или не
 */
export interface IsProtocolBasedBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали предписаното количество е по опаковки или по лекарствена форма
 */
export interface IsQuantityByFormBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали прегледа е първичен или вторичен
 */
export interface IsSecondaryBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали пациентът е специален случай (напр. с намален имунитет) и има нужда от модифицирана имунизационна схема - по преценка на лекаря
 */
export interface IsSpecialCaseBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали могат да бъдат изписани заместители за съответното лекарство
 */
export interface IsSubstitutionAllowedBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали обработката на този пакет е била успешна в НЗИС
 */
export interface IsSuccessfulBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали има издаден документ от специфицирания тип
 */
export interface IssuedDocumentBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата и час, в които ресурс е издаден
 */
export interface IssuedOnBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Уникален код генериран от системата на лекаря/стоматолога. Например: Година + УИН + пореден номер за съответната година
 */
export interface LrnBase {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Номер на Партида на Лекарствен Продукт
 */
export interface LotBase {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Семейно положение към момента на издаване на е-документа
 */
export interface MaritalStatusBase {
  "value": CL064;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Медико-диагностична дейност
 */
export interface MdaBase {
  "value": CL022;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Статус на доклад за медико-диагностична дейност
 */
export interface MdaStatus {
  "value": CL083;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Уникален идентификатор на медикамент. Извлича се от регистрите на НСЦРЛП
 */
export interface MedicationCodeBase {
  "value": CL009;
  "name"?: string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Второ/Презиме/Бащино име (при повече от едно междинно име, въвеждат се в това поле разделени с интервал)
 */
export interface MiddleNameBase {
  "value": AlphaString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * МКБ код
 */
export interface MkbBase {
  "value": CL011;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Националност
 */
export interface NationalityBase {
  "value": CL005;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата на следващата доза при серийни ваксини
 */
export interface NextDoseDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * НЗОК код на Лекарствен продукт
 */
export interface NhifCodeBase {
  "value": CL026;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Номер на договора на аптеката с НЗОК
 */
export interface NhifContractBase {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * НЗОК номер на който е регистрирана съответната практика
 */
export interface NhifNumberBase {
  "value": NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Код на ваксината по НЗОК - за разлика от "vaccineCode", този е различен за всяка отделна доза при една и съща ваксина
 */
export interface NhifVaccineCodeBase {
  "value": CL038;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Идентификатор на номенклатура
 */
export interface NomenclatureIdBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Брой на извършените процедури (напр. при физиотерапевтични посещения)
 */
export interface NumberPerformedBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип на наблюдението
 */
export interface ObservationCodeBase {
  "value": CL024;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата на събитие
 */
export interface OccurrenceBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Интервал в минути спрямо времето или събитието, според което да се приеме лекарството (напр. "25 минути преди сън")
 */
export interface OffsetBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата и час на започване на прегледа
 */
export interface OpenDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата, на която от пациента е взет биологичен материал или е извършено образно изследване
 */
export interface PerformedDateTimeBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Период на изпълнение на инструкциите в посочената мерна единица
 */
export interface PeriodBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Мерна единица за периода на изпълнението на инструкциите
 */
export interface PeriodUnitBase {
  "value": CL020;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Регистрационен номер на разрешителното на аптеката от ИАЛ
 */
export interface PharmacyNumberBase {
  "value": AlphanumericString;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Телефон за връзка - препоръчителен формат е MSISDN
 */
export interface PhoneBase {
  "value": NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Пин с 4 цифри и/или букви
 */
export interface PinBase {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * УИН/ЛПК на Лекар/Лекар по дентална медицина
 */
export interface PmiBase {
  "value": NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Пощенски код
 */
export interface PostCodeBase {
  "value": NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * УИН на Магистър Фармацевт
 */
export interface PphiBase {
  "value": NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Продуктов Код на Лекарствен Продукт
 */
export interface PpnBase {
  "value": NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Регистрационен номер на Лечебно заведение
 */
export interface PracticeNumberBase {
  "value": NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Номер на рецептурна книжка
 */
export interface PrBookNumberBase {
  "value": NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Статус на рецептата след изпълнението на заявката
 */
export interface PrescriptionStatusBase {
  "value": CL002;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип на рецептата - бяла, реимбурсирана бланка 5 или 5а
 */
export interface PrescriptionTypeBase {
  "value": CL007;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали имунизацията е направена лично от лекаря, подаващ съобщението, или е било съобщено от друго лице (пациента, друг лекар)
 */
export interface PrimarySourceBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Приоритет за издаване на лекарствения продукт - по подразбиране "рутинно"
 */
export interface PriorityBase {
  "value": CL027;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Категория на медико-диагностична дейност
 */
export interface ProcedureCategoryBase {
  "value": CL012;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Метод на извършване на медико-диагностична дейност
 */
export interface ProcedureMethodBase {
  "value": CL025;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Статус на медико-диагностична дейност
 */
export interface ProcedureStatusBase {
  "value": CL033;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Професия или длъжност към момента на издаване на е-документа
 */
export interface ProfessionBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата на издаване на протокола
 */
export interface ProtocolDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Номер на протокол
 */
export interface ProtocolNumberBase {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Причина за посещението при лекаря
 */
export interface PurposeBase {
  "value": CL047;
  "dataType"?: string;
  [k: string]: unknown;
}
export interface QualificationBase {
  "value": CL006;
  "nhifCode"?: NumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Количество на предписаните опаковки
 */
export interface QuantityBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата на изчезване на реакцията (ако е приложимо)
 */
export interface ReactionEndDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата на възникване на реакцията
 */
export interface ReactionStartDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Причина за действието
 */
export interface ReasonBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Горна референтна стойност (ако е приложима)
 */
export interface ReferenceHighBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Долна референтна стойност (ако е приложима)
 */
export interface ReferenceLowBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Текстова референтна стойност (ако е приложима)
 */
export interface ReferenceTextBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Статус на направлението след изпълнението на заявката
 */
export interface ReferralStatusBase {
  "value": CL003;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Повод за издаване на направление
 */
export interface ReferralSubtypeBase {
  "value": CL021;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип на направление
 */
export interface ReferralTypeBase {
  "value": CL014;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали реакцията е докладвана от пациента или е била наблюдавана от лекар
 */
export interface ReportedBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * РЗОК номер и здравен район
 */
export interface RhifAreaNumberBase {
  "value": CL029;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * РЗОК номер
 */
export interface RhifNumberBase {
  "value": CL015;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * По какъв път би следвало медикаментът да навлезе в тялото (напр. "орално")
 */
export interface RouteBase {
  "value": CL013;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Номер на Районна Фармацевтична колегия
 */
export interface RphaNumberBase {
  "value": CL017;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата за търсене в диапазон
 */
export interface SearchDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Поредност на изпълнението в случай, че има повече от един елемент от този тип
 */
export interface SequenceBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Пореден номер на лекарствения продукт в рецептата (например: 1, 2, 3, ...)
 */
export interface SequenceIdBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Общ брой на дозите от ваксината до постигане на имунитет
 */
export interface SeriesDosesBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Брой дни на болничния
 */
export interface SickLeaveDaysBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали е първичен болничен или продължение
 */
export interface SickLeaveIsInitialBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва дали болничния лист е активен (true) или анулиран (false)
 */
export interface SickLeaveStatusBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Сериен Номер на Лекарствен Продукт
 */
export interface SnBase {
  "value": AlphanumericString & {
    [k: string]: unknown;
  };
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Код на (високо)специализирана дейност, назначена или изпълнена процедура за физикална и рехабилитационна медицина
 */
export interface SpecializedActivityCodeBase {
  "value": CL050;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип на заместването (напр: "генерично")
 */
export interface SubstitutionTypeBase {
  "value": CL016;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Предписани нелекарствени добавки към рецептата, които не присъстват в номенклатури CL009 и CL026 (напр. витамини, пробиотици, хранителни добавки)
 */
export interface SupplementsBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Социална група на пациента (лекари, учители, общи работници, пенсионери и т.н.)
 */
export interface SocialGroupBase {
  "value": CL042;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Начална дата на зададен календарен период
 */
export interface StartDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Текстови указания
 */
export interface TextBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип на авторизационен токен
 */
export interface TokenTypeBase {
  "value": "bearer";
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата за на последна актуализация
 */
export interface UpdateDateBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Идентификатор на сертификат за ваксинация
 */
export interface UvciBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * ATC код на предходната ваксина
 */
export interface VaccineAtcBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Код на ваксината
 */
export interface VaccineCodeBase {
  "value": CL037;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Международно нетърговско наименование на предходната ваксина
 */
export interface VaccineInnBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Име на предходната ваксина
 */
export interface VaccineNameBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * При valueScale стойност "NOM" - резултатът от наблюдението се записва чрез избор от номенклатура
 */
export interface ValueCodeBase {
  "value": CL030;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата и час на излизане на резултата от наблюдението
 */
export interface ValueDateTimeBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тип на използваната номенклатура за резултат
 */
export interface ValueNomenclatureBase {
  "value": CL032;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * При valueScale стойност "QN" - резултатът от наблюдението се записва чрез децимална стойност
 */
export interface ValueQuantityBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Скала на стойността на резултата от наблюдението
 */
export interface ValueScaleBase {
  "value": CL028;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * При valueScale стойност "NAR" - резултатът от наблюдението се записва чрез свободен текст
 */
export interface ValueStringBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Мерна единица на стойността на резултата от наблюдението (ако е приложима)
 */
export interface ValueUnitBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Указва, дали медикамента е бил заместен с друг
 */
export interface WasSubstitutedBase {
  "value": boolean | number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Тегло
 */
export interface WeightBase {
  "value": number;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата и час на издаване на медикамента към пациента
 */
export interface WhenHandedOverBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Дата и час на приготвяне на медикамента, ако се приготвя на място в аптеката
 */
export interface WhenPreparedBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Време или събитие, според което да се приеме лекарството (напр. "с храна" или "преди сън")
 */
export interface WhenToTakeBase {
  "value": CL034;
  "dataType"?: string;
  [k: string]: unknown;
}
/**
 * Месторабота към момента на издаване на е-документа
 */
export interface WorkplaceBase {
  "value": string;
  "dataType"?: string;
  [k: string]: unknown;
}
export interface AddressBase {
  country: CountryCodeBase;
  county?: CountyBase;
  ekatte?: EkatteBase;
  city: CityBase;
  line?: AddressDetailsBase;
  postalCode?: PostCodeBase;
  [k: string]: unknown;
}
export interface DiagnosisBasic {
  code: MkbBase;
  additionalCode?: MkbBase;
  note?: TextBase;
  [k: string]: unknown;
}
export interface DiagnosticReport {
  code: SpecializedActivityCodeBase;
  status: MdaStatus;
  numberPerformed: NumberPerformedBase;
  result?: Observation | Observation[];
  conclusion?: TextBase;
  [k: string]: unknown;
}
export interface DosageInstruction {
  sequence?: SequenceBase;
  asNeeded?: AsNeededBase;
  route?: RouteBase;
  doseQuantityValue: DoseQuantityValueBase;
  doseQuantityCode: DoseQuantityCodeBase;
  frequency: FrequencyBase;
  period: PeriodBase;
  periodUnit: PeriodUnitBase;
  boundsDuration?: BoundsDurationBase;
  boundsDurationUnit?: BoundsDurationUnitBase;
  when?: WhenToTakeBase;
  offset?: OffsetBase;
  text?: TextBase;
  [k: string]: unknown;
}
export interface ExtImmunizationDetails {
  occurrence: OccurrenceBase;
  vaccineName: VaccineNameBase;
  vaccineAtc?: VaccineAtcBase;
  vaccineInn?: VaccineInnBase;
  serialNumber?: SnBase;
  lotNumber: LotBase;
  country: CountryCodeBase;
  authority: AuthorityBase;
  [k: string]: unknown;
}
export interface HumanNameBase {
  given: GivenNameBase;
  middle?: MiddleNameBase;
  family: FamilyNameBase;
  [k: string]: unknown;
}
export interface MedicalPractitioner {
  pmi: PmiBase;
  pmiDeputy?: PmiBase;
  qualification: QualificationBase;
  role: DeputyRoleBase;
  practiceNumber: PracticeNumberBase;
  rhifAreaNumber?: RhifAreaNumberBase;
  nhifNumber?: NhifNumberBase;
  phone?: PhoneBase;
  email?: EmailBase;
  [k: string]: unknown;
}
export interface MedicationPrescribe {
  sequenceId: SequenceIdBase;
  medicationCode: MedicationCodeBase;
  form: MedicationFormBase;
  priority?: PriorityBase;
  note?: TextBase;
  mkb?: MkbBase;
  nhifCode?: NhifCodeBase;
  quantityValue: QuantityBase;
  isQuantityByForm: IsQuantityByFormBase;
  isDispensed?: IsDispensedBase;
  isSubstitutionAllowed?: IsSubstitutionAllowedBase;
  dosageInstruction: DosageInstruction | DosageInstruction[];
  [k: string]: unknown;
}
export interface MedicationDispense {
  sequenceId: SequenceIdBase;
  medicationCode: MedicationCodeBase;
  form: MedicationFormBase;
  verification?: Verification | Verification[];
  nhifCode?: NhifCodeBase;
  quantityValue: QuantityBase;
  isQuantityByForm: IsQuantityByFormBase;
  whenPrepared?: WhenPreparedBase;
  whenHandedOver: WhenHandedOverBase;
  paidByPatient?: Amount;
  paidByNhif?: Amount;
  substitution?: {
    wasSubstituted: WasSubstitutedBase;
    substitutionType: SubstitutionTypeBase;
    reason: ReasonBase;
    [k: string]: unknown;
  };
  dosageInstruction?: DosageInstruction | DosageInstruction[];
  [k: string]: unknown;
}
export interface Verification {
  ppn?: PpnBase;
  gtin?: GtinBase;
  sn?: SnBase;
  lot?: LotBase;
  exp?: ExpBase;
  [k: string]: unknown;
}
export interface Patient {
  identifierType: IdentifierTypeBase;
  identifier: IdentifierBase;
  birthDate: BirthDateBase;
  gender: GenderBase;
  name: HumanNameBase;
  address: AddressBase;
  nationality?: NationalityBase;
  phone?: PhoneBase;
  email?: EmailBase;
  [k: string]: unknown;
}
export interface Procedure {
  code: MdaBase;
  performedDateTime: PerformedDateTimeBase;
  cannotPerform: CannotPerformBase;
  cannotPerformReason?: ReasonBase;
  device?: DeviceBase | DeviceBase[];
  observation?: Observation | Observation[];
  [k: string]: unknown;
}
export interface ReferenceRange {
  low?: ReferenceLowBase;
  high?: ReferenceHighBase;
  text?: ReferenceTextBase;
  [k: string]: unknown;
}
